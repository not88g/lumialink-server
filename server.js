const WebSocket = require("ws");

const port = process.env.PORT || 3000;
const wss = new WebSocket.Server({ port });

let users = {};    // @username ‚Üí ws
let friends = {};  // @username ‚Üí [friends]
let blocked = {};  // @username ‚Üí [blocked]

function ensureUser(name) {
  if (!friends[name]) friends[name] = [];
  if (!blocked[name]) blocked[name] = [];
}

wss.on("connection", ws => {
  console.log("üì≤ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  ws.on("message", msg => {
    let data;
    try {
      data = JSON.parse(msg);
    } catch (e) {
      console.log("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", msg);
      return;
    }

    // üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    if (data.type === "register") {
      if (!data.username.startsWith("@")) {
        ws.send(JSON.stringify({ type: "error", message: "Username must start with @" }));
        return;
      }
      users[data.username] = ws;
      ensureUser(data.username);
      ws.username = data.username; // —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –æ–±—ä–µ–∫—Ç–µ ws
      ws.send(JSON.stringify({ type: "registered", username: data.username }));
      console.log(`‚úÖ ${data.username} –≤–æ—à—ë–ª`);
    }

    // üîπ –ü–æ–∏—Å–∫
    if (data.type === "search") {
      const found = users[data.username] ? true : false;
      ws.send(JSON.stringify({ type: "search_result", username: data.username, found }));
    }

    // üîπ –°–æ–æ–±—â–µ–Ω–∏–µ
    if (data.type === "message") {
      const to = data.to;
      ensureUser(to);
      if (blocked[to] && blocked[to].includes(data.from)) {
        console.log(`üö´ ${data.from} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É ${to}`);
        return;
      }
      const targetWs = users[to];
      if (targetWs && targetWs.readyState === WebSocket.OPEN) {
        targetWs.send(JSON.stringify({
          type: "message",
          from: data.from,
          message: data.message
        }));
      }
    }

    // üîπ –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
    if (data.type === "add_friend") {
      ensureUser(data.from);
      ensureUser(data.to);
      if (!friends[data.from].includes(data.to)) {
        friends[data.from].push(data.to);
      }
      ws.send(JSON.stringify({ type: "friend_added", friend: data.to }));
    }

    // üîπ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    if (data.type === "block_user") {
      ensureUser(data.from);
      if (!blocked[data.from].includes(data.to)) {
        blocked[data.from].push(data.to);
      }
      ws.send(JSON.stringify({ type: "user_blocked", user: data.to }));
    }
  });

  ws.on("close", () => {
    if (ws.username) {
      console.log(`‚ùå ${ws.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
      delete users[ws.username];
    }
  });
});

console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
